// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: movie_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieClient is the client API for Movie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieClient interface {
	// Director Method
	GetDirectors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Movie_GetDirectorsClient, error)
	CreateDirector(ctx context.Context, in *DirectorName, opts ...grpc.CallOption) (*DirectorId, error)
	UpdateDirector(ctx context.Context, in *DirectorSub, opts ...grpc.CallOption) (*Status, error)
	FindDirector(ctx context.Context, in *DirectorId, opts ...grpc.CallOption) (*Director, error)
	DeleteDirector(ctx context.Context, in *DirectorId, opts ...grpc.CallOption) (*Status, error)
	// User Method
	GetUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Movie_GetUsersClient, error)
	CreateUser(ctx context.Context, opts ...grpc.CallOption) (Movie_CreateUserClient, error)
}

type movieClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieClient(cc grpc.ClientConnInterface) MovieClient {
	return &movieClient{cc}
}

func (c *movieClient) GetDirectors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Movie_GetDirectorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Movie_ServiceDesc.Streams[0], "/movieapp.Movie/GetDirectors", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieGetDirectorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Movie_GetDirectorsClient interface {
	Recv() (*Director, error)
	grpc.ClientStream
}

type movieGetDirectorsClient struct {
	grpc.ClientStream
}

func (x *movieGetDirectorsClient) Recv() (*Director, error) {
	m := new(Director)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieClient) CreateDirector(ctx context.Context, in *DirectorName, opts ...grpc.CallOption) (*DirectorId, error) {
	out := new(DirectorId)
	err := c.cc.Invoke(ctx, "/movieapp.Movie/CreateDirector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieClient) UpdateDirector(ctx context.Context, in *DirectorSub, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/movieapp.Movie/UpdateDirector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieClient) FindDirector(ctx context.Context, in *DirectorId, opts ...grpc.CallOption) (*Director, error) {
	out := new(Director)
	err := c.cc.Invoke(ctx, "/movieapp.Movie/FindDirector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieClient) DeleteDirector(ctx context.Context, in *DirectorId, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/movieapp.Movie/DeleteDirector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieClient) GetUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Movie_GetUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Movie_ServiceDesc.Streams[1], "/movieapp.Movie/GetUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieGetUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Movie_GetUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type movieGetUsersClient struct {
	grpc.ClientStream
}

func (x *movieGetUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieClient) CreateUser(ctx context.Context, opts ...grpc.CallOption) (Movie_CreateUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &Movie_ServiceDesc.Streams[2], "/movieapp.Movie/CreateUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieCreateUserClient{stream}
	return x, nil
}

type Movie_CreateUserClient interface {
	Send(*CreateUserRequest) error
	CloseAndRecv() (*TotalUserResponse, error)
	grpc.ClientStream
}

type movieCreateUserClient struct {
	grpc.ClientStream
}

func (x *movieCreateUserClient) Send(m *CreateUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *movieCreateUserClient) CloseAndRecv() (*TotalUserResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TotalUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MovieServer is the server API for Movie service.
// All implementations must embed UnimplementedMovieServer
// for forward compatibility
type MovieServer interface {
	// Director Method
	GetDirectors(*Empty, Movie_GetDirectorsServer) error
	CreateDirector(context.Context, *DirectorName) (*DirectorId, error)
	UpdateDirector(context.Context, *DirectorSub) (*Status, error)
	FindDirector(context.Context, *DirectorId) (*Director, error)
	DeleteDirector(context.Context, *DirectorId) (*Status, error)
	// User Method
	GetUsers(*Empty, Movie_GetUsersServer) error
	CreateUser(Movie_CreateUserServer) error
	mustEmbedUnimplementedMovieServer()
}

// UnimplementedMovieServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServer struct {
}

func (UnimplementedMovieServer) GetDirectors(*Empty, Movie_GetDirectorsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDirectors not implemented")
}
func (UnimplementedMovieServer) CreateDirector(context.Context, *DirectorName) (*DirectorId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirector not implemented")
}
func (UnimplementedMovieServer) UpdateDirector(context.Context, *DirectorSub) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDirector not implemented")
}
func (UnimplementedMovieServer) FindDirector(context.Context, *DirectorId) (*Director, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDirector not implemented")
}
func (UnimplementedMovieServer) DeleteDirector(context.Context, *DirectorId) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDirector not implemented")
}
func (UnimplementedMovieServer) GetUsers(*Empty, Movie_GetUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedMovieServer) CreateUser(Movie_CreateUserServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMovieServer) mustEmbedUnimplementedMovieServer() {}

// UnsafeMovieServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServer will
// result in compilation errors.
type UnsafeMovieServer interface {
	mustEmbedUnimplementedMovieServer()
}

func RegisterMovieServer(s grpc.ServiceRegistrar, srv MovieServer) {
	s.RegisterService(&Movie_ServiceDesc, srv)
}

func _Movie_GetDirectors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieServer).GetDirectors(m, &movieGetDirectorsServer{stream})
}

type Movie_GetDirectorsServer interface {
	Send(*Director) error
	grpc.ServerStream
}

type movieGetDirectorsServer struct {
	grpc.ServerStream
}

func (x *movieGetDirectorsServer) Send(m *Director) error {
	return x.ServerStream.SendMsg(m)
}

func _Movie_CreateDirector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServer).CreateDirector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movieapp.Movie/CreateDirector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServer).CreateDirector(ctx, req.(*DirectorName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Movie_UpdateDirector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorSub)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServer).UpdateDirector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movieapp.Movie/UpdateDirector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServer).UpdateDirector(ctx, req.(*DirectorSub))
	}
	return interceptor(ctx, in, info, handler)
}

func _Movie_FindDirector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServer).FindDirector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movieapp.Movie/FindDirector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServer).FindDirector(ctx, req.(*DirectorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Movie_DeleteDirector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServer).DeleteDirector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movieapp.Movie/DeleteDirector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServer).DeleteDirector(ctx, req.(*DirectorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Movie_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieServer).GetUsers(m, &movieGetUsersServer{stream})
}

type Movie_GetUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type movieGetUsersServer struct {
	grpc.ServerStream
}

func (x *movieGetUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _Movie_CreateUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MovieServer).CreateUser(&movieCreateUserServer{stream})
}

type Movie_CreateUserServer interface {
	SendAndClose(*TotalUserResponse) error
	Recv() (*CreateUserRequest, error)
	grpc.ServerStream
}

type movieCreateUserServer struct {
	grpc.ServerStream
}

func (x *movieCreateUserServer) SendAndClose(m *TotalUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *movieCreateUserServer) Recv() (*CreateUserRequest, error) {
	m := new(CreateUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Movie_ServiceDesc is the grpc.ServiceDesc for Movie service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Movie_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movieapp.Movie",
	HandlerType: (*MovieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDirector",
			Handler:    _Movie_CreateDirector_Handler,
		},
		{
			MethodName: "UpdateDirector",
			Handler:    _Movie_UpdateDirector_Handler,
		},
		{
			MethodName: "FindDirector",
			Handler:    _Movie_FindDirector_Handler,
		},
		{
			MethodName: "DeleteDirector",
			Handler:    _Movie_DeleteDirector_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDirectors",
			Handler:       _Movie_GetDirectors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUsers",
			Handler:       _Movie_GetUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateUser",
			Handler:       _Movie_CreateUser_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "movie_service.proto",
}
